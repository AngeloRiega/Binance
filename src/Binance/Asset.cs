// ReSharper disable InconsistentNaming
using System;
using System.Collections.Generic;
using System.Linq;

namespace Binance
{
    /// <summary>
    /// Defined assets (for convenience/reference only).
    /// </summary>
    /// <remarks>File generated by BinanceCodeGenerator tool.</remarks>
    public sealed class Asset : IComparable<Asset>, IEquatable<Asset>
    {
        #region Public Constants

        /// <summary>
        /// When the assets were last updated.
        /// </summary>
        public static readonly long LastUpdateAt = 1523044545253;

        public static readonly Asset ADA = new Asset("ADA", 8);
        public static readonly Asset ADX = new Asset("ADX", 8);
        public static readonly Asset AE = new Asset("AE", 8);
        public static readonly Asset AION = new Asset("AION", 8);
        public static readonly Asset AMB = new Asset("AMB", 8);
        public static readonly Asset APPC = new Asset("APPC", 8);
        public static readonly Asset ARK = new Asset("ARK", 8);
        public static readonly Asset ARN = new Asset("ARN", 8);
        public static readonly Asset AST = new Asset("AST", 8);
        public static readonly Asset BAT = new Asset("BAT", 8);
        public static readonly Asset BCC = new Asset("BCC", 8);
        public static readonly Asset BCD = new Asset("BCD", 8);
        public static readonly Asset BCPT = new Asset("BCPT", 8);
        public static readonly Asset BLZ = new Asset("BLZ", 8);
        public static readonly Asset BNB = new Asset("BNB", 8);
        public static readonly Asset BNT = new Asset("BNT", 8);
        public static readonly Asset BQX = new Asset("BQX", 8);
        public static readonly Asset BRD = new Asset("BRD", 8);
        public static readonly Asset BTC = new Asset("BTC", 8);
        public static readonly Asset BTG = new Asset("BTG", 8);
        public static readonly Asset BTS = new Asset("BTS", 8);
        public static readonly Asset CDT = new Asset("CDT", 8);
        public static readonly Asset CHAT = new Asset("CHAT", 8);
        public static readonly Asset CMT = new Asset("CMT", 8);
        public static readonly Asset CND = new Asset("CND", 8);
        public static readonly Asset CTR = new Asset("CTR", 8);
        public static readonly Asset DASH = new Asset("DASH", 8);
        public static readonly Asset DGD = new Asset("DGD", 8);
        public static readonly Asset DLT = new Asset("DLT", 8);
        public static readonly Asset DNT = new Asset("DNT", 8);
        public static readonly Asset EDO = new Asset("EDO", 8);
        public static readonly Asset ELF = new Asset("ELF", 8);
        public static readonly Asset ENG = new Asset("ENG", 8);
        public static readonly Asset ENJ = new Asset("ENJ", 8);
        public static readonly Asset EOS = new Asset("EOS", 8);
        public static readonly Asset ETC = new Asset("ETC", 8);
        public static readonly Asset ETH = new Asset("ETH", 8);
        public static readonly Asset EVX = new Asset("EVX", 8);
        public static readonly Asset FUEL = new Asset("FUEL", 8);
        public static readonly Asset FUN = new Asset("FUN", 8);
        public static readonly Asset GAS = new Asset("GAS", 8);
        public static readonly Asset GRS = new Asset("GRS", 8);
        public static readonly Asset GTO = new Asset("GTO", 8);
        public static readonly Asset GVT = new Asset("GVT", 8);
        public static readonly Asset GXS = new Asset("GXS", 8);
        public static readonly Asset HSR = new Asset("HSR", 8);
        public static readonly Asset ICN = new Asset("ICN", 8);
        public static readonly Asset ICX = new Asset("ICX", 8);
        public static readonly Asset INS = new Asset("INS", 8);
        public static readonly Asset IOST = new Asset("IOST", 8);
        public static readonly Asset IOTA = new Asset("IOTA", 8);
        public static readonly Asset KMD = new Asset("KMD", 8);
        public static readonly Asset KNC = new Asset("KNC", 8);
        public static readonly Asset LEND = new Asset("LEND", 8);
        public static readonly Asset LINK = new Asset("LINK", 8);
        public static readonly Asset LRC = new Asset("LRC", 8);
        public static readonly Asset LSK = new Asset("LSK", 8);
        public static readonly Asset LTC = new Asset("LTC", 8);
        public static readonly Asset LUN = new Asset("LUN", 8);
        public static readonly Asset MANA = new Asset("MANA", 8);
        public static readonly Asset MCO = new Asset("MCO", 8);
        public static readonly Asset MDA = new Asset("MDA", 8);
        public static readonly Asset MOD = new Asset("MOD", 8);
        public static readonly Asset MTH = new Asset("MTH", 8);
        public static readonly Asset MTL = new Asset("MTL", 8);
        public static readonly Asset NANO = new Asset("NANO", 8);
        public static readonly Asset NAV = new Asset("NAV", 8);
        public static readonly Asset NCASH = new Asset("NCASH", 8);
        public static readonly Asset NEBL = new Asset("NEBL", 8);
        public static readonly Asset NEO = new Asset("NEO", 8);
        public static readonly Asset NULS = new Asset("NULS", 8);
        public static readonly Asset OAX = new Asset("OAX", 8);
        public static readonly Asset OMG = new Asset("OMG", 8);
        public static readonly Asset ONT = new Asset("ONT", 8);
        public static readonly Asset OST = new Asset("OST", 8);
        public static readonly Asset PIVX = new Asset("PIVX", 8);
        public static readonly Asset POA = new Asset("POA", 8);
        public static readonly Asset POE = new Asset("POE", 8);
        public static readonly Asset POWR = new Asset("POWR", 8);
        public static readonly Asset PPT = new Asset("PPT", 8);
        public static readonly Asset QLC = new Asset("QLC", 8);
        public static readonly Asset QSP = new Asset("QSP", 8);
        public static readonly Asset QTUM = new Asset("QTUM", 8);
        public static readonly Asset RCN = new Asset("RCN", 8);
        public static readonly Asset RDN = new Asset("RDN", 8);
        public static readonly Asset REQ = new Asset("REQ", 8);
        public static readonly Asset RLC = new Asset("RLC", 8);
        public static readonly Asset RPX = new Asset("RPX", 8);
        public static readonly Asset SALT = new Asset("SALT", 8);
        public static readonly Asset SNGLS = new Asset("SNGLS", 8);
        public static readonly Asset SNM = new Asset("SNM", 8);
        public static readonly Asset SNT = new Asset("SNT", 8);
        public static readonly Asset STEEM = new Asset("STEEM", 8);
        public static readonly Asset STORJ = new Asset("STORJ", 8);
        public static readonly Asset STORM = new Asset("STORM", 8);
        public static readonly Asset STRAT = new Asset("STRAT", 8);
        public static readonly Asset SUB = new Asset("SUB", 8);
        public static readonly Asset SYS = new Asset("SYS", 8);
        public static readonly Asset TNB = new Asset("TNB", 8);
        public static readonly Asset TNT = new Asset("TNT", 8);
        public static readonly Asset TRIG = new Asset("TRIG", 8);
        public static readonly Asset TRX = new Asset("TRX", 8);
        public static readonly Asset USDT = new Asset("USDT", 8);
        public static readonly Asset VEN = new Asset("VEN", 8);
        public static readonly Asset VIA = new Asset("VIA", 8);
        public static readonly Asset VIB = new Asset("VIB", 8);
        public static readonly Asset VIBE = new Asset("VIBE", 8);
        public static readonly Asset WABI = new Asset("WABI", 8);
        public static readonly Asset WAN = new Asset("WAN", 8);
        public static readonly Asset WAVES = new Asset("WAVES", 8);
        public static readonly Asset WINGS = new Asset("WINGS", 8);
        public static readonly Asset WPR = new Asset("WPR", 8);
        public static readonly Asset WTC = new Asset("WTC", 8);
        public static readonly Asset XEM = new Asset("XEM", 8);
        public static readonly Asset XLM = new Asset("XLM", 8);
        public static readonly Asset XMR = new Asset("XMR", 8);
        public static readonly Asset XRP = new Asset("XRP", 8);
        public static readonly Asset XVG = new Asset("XVG", 8);
        public static readonly Asset XZC = new Asset("XZC", 8);
        public static readonly Asset YOYO = new Asset("YOYO", 8);
        public static readonly Asset ZEC = new Asset("ZEC", 8);
        public static readonly Asset ZIL = new Asset("ZIL", 8);
        public static readonly Asset ZRX = new Asset("ZRX", 8);

        // Redirect (BCH) Bitcoin Cash (BCC = BitConnect)
        public static readonly Asset BCH;

        #endregion Public Constants

        #region Implicit Operators

        public static bool operator ==(Asset x, Asset y) => Equals(x, y);

        public static bool operator !=(Asset x, Asset y) => !(x == y);

        public static implicit operator string(Asset asset) => asset?.ToString();

        public static implicit operator Asset(string s)
        {
            if (s == null) return null;
            var _s = s.FormatSymbol();
            lock (_sync)
            {
                return Cache.ContainsKey(_s) ? Cache[_s] : null;
            }
        }

        #endregion Implicit Operators

        #region Public Properties

        /// <summary>
        /// Asset cache.
        /// </summary>
        public static IDictionary<string, Asset> Cache { get; }

        /// <summary>
        /// Get the asset symbol.
        /// </summary>
        public string Symbol { get; }

        /// <summary>
        /// Get the asset precision.
        /// </summary>
        public int Precision { get; }

        #endregion Public Properties

        #region Private Fields

        private static readonly object _sync = new object();

        #endregion Private Fields

        #region Constructors

        static Asset()
        {
            try
            {
                // Redirect (BCH) Bitcoin Cash (BCC = BitConnect)
                BCH = BCC;

                Cache = new Dictionary<string, Asset>
                {
                    { string.Intern("ADA"), ADA },
                    { string.Intern("ADX"), ADX },
                    { string.Intern("AE"), AE },
                    { string.Intern("AION"), AION },
                    { string.Intern("AMB"), AMB },
                    { string.Intern("APPC"), APPC },
                    { string.Intern("ARK"), ARK },
                    { string.Intern("ARN"), ARN },
                    { string.Intern("AST"), AST },
                    { string.Intern("BAT"), BAT },
                    { string.Intern("BCC"), BCC },
                    { string.Intern("BCD"), BCD },
                    { string.Intern("BCPT"), BCPT },
                    { string.Intern("BLZ"), BLZ },
                    { string.Intern("BNB"), BNB },
                    { string.Intern("BNT"), BNT },
                    { string.Intern("BQX"), BQX },
                    { string.Intern("BRD"), BRD },
                    { string.Intern("BTC"), BTC },
                    { string.Intern("BTG"), BTG },
                    { string.Intern("BTS"), BTS },
                    { string.Intern("CDT"), CDT },
                    { string.Intern("CHAT"), CHAT },
                    { string.Intern("CMT"), CMT },
                    { string.Intern("CND"), CND },
                    { string.Intern("CTR"), CTR },
                    { string.Intern("DASH"), DASH },
                    { string.Intern("DGD"), DGD },
                    { string.Intern("DLT"), DLT },
                    { string.Intern("DNT"), DNT },
                    { string.Intern("EDO"), EDO },
                    { string.Intern("ELF"), ELF },
                    { string.Intern("ENG"), ENG },
                    { string.Intern("ENJ"), ENJ },
                    { string.Intern("EOS"), EOS },
                    { string.Intern("ETC"), ETC },
                    { string.Intern("ETH"), ETH },
                    { string.Intern("EVX"), EVX },
                    { string.Intern("FUEL"), FUEL },
                    { string.Intern("FUN"), FUN },
                    { string.Intern("GAS"), GAS },
                    { string.Intern("GRS"), GRS },
                    { string.Intern("GTO"), GTO },
                    { string.Intern("GVT"), GVT },
                    { string.Intern("GXS"), GXS },
                    { string.Intern("HSR"), HSR },
                    { string.Intern("ICN"), ICN },
                    { string.Intern("ICX"), ICX },
                    { string.Intern("INS"), INS },
                    { string.Intern("IOST"), IOST },
                    { string.Intern("IOTA"), IOTA },
                    { string.Intern("KMD"), KMD },
                    { string.Intern("KNC"), KNC },
                    { string.Intern("LEND"), LEND },
                    { string.Intern("LINK"), LINK },
                    { string.Intern("LRC"), LRC },
                    { string.Intern("LSK"), LSK },
                    { string.Intern("LTC"), LTC },
                    { string.Intern("LUN"), LUN },
                    { string.Intern("MANA"), MANA },
                    { string.Intern("MCO"), MCO },
                    { string.Intern("MDA"), MDA },
                    { string.Intern("MOD"), MOD },
                    { string.Intern("MTH"), MTH },
                    { string.Intern("MTL"), MTL },
                    { string.Intern("NANO"), NANO },
                    { string.Intern("NAV"), NAV },
                    { string.Intern("NCASH"), NCASH },
                    { string.Intern("NEBL"), NEBL },
                    { string.Intern("NEO"), NEO },
                    { string.Intern("NULS"), NULS },
                    { string.Intern("OAX"), OAX },
                    { string.Intern("OMG"), OMG },
                    { string.Intern("ONT"), ONT },
                    { string.Intern("OST"), OST },
                    { string.Intern("PIVX"), PIVX },
                    { string.Intern("POA"), POA },
                    { string.Intern("POE"), POE },
                    { string.Intern("POWR"), POWR },
                    { string.Intern("PPT"), PPT },
                    { string.Intern("QLC"), QLC },
                    { string.Intern("QSP"), QSP },
                    { string.Intern("QTUM"), QTUM },
                    { string.Intern("RCN"), RCN },
                    { string.Intern("RDN"), RDN },
                    { string.Intern("REQ"), REQ },
                    { string.Intern("RLC"), RLC },
                    { string.Intern("RPX"), RPX },
                    { string.Intern("SALT"), SALT },
                    { string.Intern("SNGLS"), SNGLS },
                    { string.Intern("SNM"), SNM },
                    { string.Intern("SNT"), SNT },
                    { string.Intern("STEEM"), STEEM },
                    { string.Intern("STORJ"), STORJ },
                    { string.Intern("STORM"), STORM },
                    { string.Intern("STRAT"), STRAT },
                    { string.Intern("SUB"), SUB },
                    { string.Intern("SYS"), SYS },
                    { string.Intern("TNB"), TNB },
                    { string.Intern("TNT"), TNT },
                    { string.Intern("TRIG"), TRIG },
                    { string.Intern("TRX"), TRX },
                    { string.Intern("USDT"), USDT },
                    { string.Intern("VEN"), VEN },
                    { string.Intern("VIA"), VIA },
                    { string.Intern("VIB"), VIB },
                    { string.Intern("VIBE"), VIBE },
                    { string.Intern("WABI"), WABI },
                    { string.Intern("WAN"), WAN },
                    { string.Intern("WAVES"), WAVES },
                    { string.Intern("WINGS"), WINGS },
                    { string.Intern("WPR"), WPR },
                    { string.Intern("WTC"), WTC },
                    { string.Intern("XEM"), XEM },
                    { string.Intern("XLM"), XLM },
                    { string.Intern("XMR"), XMR },
                    { string.Intern("XRP"), XRP },
                    { string.Intern("XVG"), XVG },
                    { string.Intern("XZC"), XZC },
                    { string.Intern("YOYO"), YOYO },
                    { string.Intern("ZEC"), ZEC },
                    { string.Intern("ZIL"), ZIL },
                    { string.Intern("ZRX"), ZRX },
            
                    // Redirect (BCH) Bitcoin Cash (BCC = BitConnect)
                    { string.Intern("BCH"), BCC }
                };
            }
            catch (Exception e)
            {
                Console.Error?.WriteLine($"{nameof(Binance)}.{nameof(Asset)}(): \"{e.Message}\"");
            }
        }

        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="symbol">The asset symbol.</param>
        /// <param name="precision">The asset precision.</param>
        public Asset(string symbol, int precision)
        {
            if (string.IsNullOrWhiteSpace(symbol))
                throw new ArgumentNullException(nameof(symbol));

            Symbol = string.Intern(symbol.ToUpperInvariant());
            Precision = precision;
        }

        #endregion Constructors

        #region Public Methods

        /// <summary>
        /// Verify that asset is valid. If fails, but known to be valid,
        /// call Symbol.UpdateCacheAsync() to get the latest assets.
        /// </summary>
        /// <param name="asset"></param>
        /// <returns></returns>
        public static bool IsValid(string asset)
        {
            if (string.IsNullOrWhiteSpace(asset))
                return false;

            asset = asset.FormatSymbol();

            lock (_sync)
            {
                return Cache.ContainsKey(asset)
                    && Cache[asset].ToString() == asset;
            }
        }

        public override bool Equals(object obj)
        {
            // ReSharper disable once ConvertIfStatementToSwitchStatement
            if (obj == null)
                return false;

            if (obj is Asset asset)
                return Equals(asset);

            return Symbol.Equals(obj);
        }

        public override int GetHashCode()
        {
            return Symbol.GetHashCode();
        }

        public override string ToString()
        {
            return Symbol;
        }

        #endregion Public Methods

        #region Internal Methods

        /// <summary>
        /// Update the asset cache.
        /// </summary>
        /// <param name="symbols">The symbols.</param>
        /// <returns></returns>
        internal static void UpdateCache(IEnumerable<Symbol> symbols)
        {
            Throw.IfNull(symbols, nameof(symbols));

            // ReSharper disable once PossibleMultipleEnumeration
            if (!symbols.Any())
                throw new ArgumentException("Enumerable must not be empty.", nameof(symbols));

            var assets = new List<Asset>();

            // ReSharper disable once PossibleMultipleEnumeration
            foreach (var symbol in symbols)
            {
                if (!assets.Contains(symbol.BaseAsset))
                    assets.Add(symbol.BaseAsset);

                if (!assets.Contains(symbol.QuoteAsset))
                    assets.Add(symbol.QuoteAsset);
            }

            lock (_sync)
            {
                // Remove any old assets (preserves redirections).
                foreach (var asset in Cache.Values.ToArray())
                {
                    if (!assets.Contains(asset))
                    {
                        Cache.Remove(asset);
                    }
                }

                // Update existing and add any new assets.
                foreach (var asset in assets)
                {
                    Cache[string.Intern(asset)] = asset;
                }
            }
        }

        #endregion Internal Methods

        #region IComparable<Asset>

        public int CompareTo(Asset other)
        {
            return other == null ? 1 : string.Compare(Symbol, other.Symbol, StringComparison.Ordinal);
        }

        #endregion IComparable<Asset>

        #region IEquatable<Asset>

        public bool Equals(Asset other)
        {
            return CompareTo(other) == 0;
        }

        #endregion IEquatable<Asset>
    }
}
